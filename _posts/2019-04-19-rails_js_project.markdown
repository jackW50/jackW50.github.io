---
layout: post
title:      "Rails/JS Project"
date:       2019-04-19 22:09:45 +0000
permalink:  rails_js_project
---


For this particular project I built JavaScript features onto a Rails app I created that tracks macronutrient compositions of a user’s current daily meals, an individual meal, and an individual food. The macronutrient compositions are kept track of on each page using a table format. This app has CRUD functionality. Each user has the ability to create, read, update, and destroy meals and foods of their choosing.

The layout of this app is still of particular interest to me, and is currently a work in progress, but for this project I just wanted to add dynamic JavaScript features. To get started with the process, I ran through a few of the apps pages and decided where some of these features could be implemented to make the app more dynamic and user friendly. For the basis of this project I decided to narrow down the implementation to what I consider the two most important pages: the user show page and the meal show page. I took these two pages into account, and then wrote out how I would want an interaction to go with a user. The flow of the program became more clear as I wrote it out.

The backend of the app takes into account object associations that can be called upon through AJAX requests. When displaying the user show page or the meal show page, I wanted to have some of these relationships brought to life through event handlers; either when clicking on a link or clicking on a button. For this app a user has many meals and a meal belongs to a user. So for the user show page I wanted a link, that when clicked upon, would send an AJAX GET request. This request would happen behind the scenes, and grab all the meals that belong to a particular user. These meals should then be returned back to us in a JSON format. We could then create JavaScript meal objects from this data, and use these objects to be displayed as we please. I also wanted the user to have the ability to create a meal from their page, so I decided to include a link that when clicked upon would display a form that could create a new meal for that particular user. If this form is submitted with the appropriate data, then it should send an AJAX POST request to the meals create route. This action would then create the meal and return to us the newly instantiated meal in JSON format. This type of interaction would allow the form to be submitted without having the page reload. If the request is successful and does indeed create a new meal, this meal will then be converted in a JavaScript meal object and then displayed how we want.

Now for this particular user show page there is already a display that will automatically show the user the meals for that current day. These meals, if they exist, will then be taken into effect and their macronutrient content will be displayed in the macronutrient composition table that we provide. When we get the newly instantiated meal returned to us from a successful AJAX POST request, we will want to take into effect whether or not this meal is in fact a meal for the current day, and if it is, we will then display is as such. We will also update the table accordingly taking into effect this newly created meal for the current day.

The meal show page was very similar to the user show page, but I wanted it to have more features to allow the user to edit the meal with a removal option and an add or create option for a food in that meal. The meal has many foods, and a food can be in many meals. So in order to take into account this relationship on our backend we had established a join table called meal_compositions. This table factors in the many meal and food combinations that exist. So each food has many meal compositions and each meal has many meal compositions. The meal composition would then belong to a food and a meal. In order to have the right type of foods displayed for a particular meal, we would then need to call upon the meals meal compositions and check to see what food was in each composition. This would then allow us to display all the foods accurately, and it would also give us the ability to remove foods from the meal without having to destroy the particular food itself. With these relationships in mind we used event handlers on links and buttons displayed on the page. The listeners would initiate an AJAX GET request to show all the meal compositions of this meal. We also set up event listeners for each meal composition on display with a remove button that when clicked upon would send an AJAX patch request for that meal which would destroy that meal composition, and thus take it out of the display on the page. For this page we also included a link that will display a form for creating a food for the meal. This form when submitted will work very similarly as the form on the user show page, it will send an AJAX POST request with the form data and push it to the appropriate controller action. When this food is created, and this request is successful, it will then return the newly instantiated food in JSON format and thus turn it into a JavaScript food object. We could then use this food by manipulating the DOM and including it within the display. This page also includes an add food form, where the user can select from a list of foods, and decide whether or not they want to add an already existing food to the meal. This type of form on submission is slightly different then the one before, because it is not creating a new food, rather it is creating a new meal composition with an already existing food. So this form when submitted will actually send an AJAX PATCH request to the meals controller to create a new meal composition for this meal. The returned meal composition upon a successful edit, can then be turned into a Javascript mealComposition object and thus be used in the display accordingly. This meal show page also includes a macronutrient composition table display just like the user show page does, but instead of this table taking into account all the current day’s meals, it takes into account the individual meals food compositions. This table should also dynamically update as foods get added or removed from the meal. This table manipulation happens upon a successful AJAX POST or PATCH request for the particular meal.  

These JavaScript features are made possible with AJAX. If we didn’t have the ability to send these requests behind the scenes the page would automatically reload every time we make a url request, and it would cause a poor user experience. 

My main focus for this project was to get the event listeners interacting with appropriate AJAX requests. It wasn’t as easy as I thought it was going to be, and I am still working out a couple of bugs here and there. It was tough and challenging, and at times mind bending. I can say that at times I did get lost, but with extra effort I was able to find myself again. Overall I would say this process taught me quite a bit, and helped me develop a good working habit. I used jQuery to make DOM manipulation and attaching event listeners easier. I found the debugger keyword to be extremely helpful as well.

Attached is a walkthough of the app [www.youtube.com/watch?v=7vr6ZsJ25_A](http://)

